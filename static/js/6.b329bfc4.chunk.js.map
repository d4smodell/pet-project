{"version":3,"sources":["Components/common/FormsControls/FormsControls.jsx","Components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","Components/Login/Login.module.css","Components/Login/Login.jsx"],"names":["FormControl","input","meta","props","child","element","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","formSummaryError","connect","state","isAuth","auth","login","logout","to","logArea","formData","email","password","rememberMe","captcha"],"mappings":"sRAIMA,EAAc,SAAC,GAA4C,EAA3CC,MAA4C,IAArCC,EAAoC,EAApCA,KAAyBC,GAAW,EAA9BC,MAA8B,EAAvBC,QAAuB,mDACvDC,EAAWJ,EAAKK,SAAWL,EAAKM,MACtC,OACI,yBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,KACxD,6BACKL,EAAMS,UAEVN,GAAY,8BAAOJ,EAAKM,SAKxBK,EAAW,SAACV,GAAW,IACzBF,EAAoCE,EAApCF,MAAuBa,GAAaX,EAA7BD,KAA6BC,EAAvBC,MADW,YACYD,EADZ,2BAE/B,OAAO,kBAACH,EAAgBG,EAAO,8CAAcF,EAAWa,MAG/CC,EAAQ,SAACZ,GAAW,IACtBF,EAAoCE,EAApCF,MAAuBa,GAAaX,EAA7BD,KAA6BC,EAAvBC,MADQ,YACeD,EADf,2BAE5B,OAAO,kBAACH,EAAgBG,EAAO,2CAAWF,EAAWa,MAG5CE,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CjB,EAA3C,uDAAmD,GAAIkB,EAAvD,uDAA8D,GAA9D,OACvB,6BACI,kBAAC,IAAD,eAAOJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPjB,IALf,IAMekB,K,oBChCnBE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,iCCD3E,oEAAO,IAAMC,EAAW,SAAAC,GACpB,IAAGA,EACH,MAAO,qBAGEC,EAAmB,SAACC,GAC7B,OAAO,SAACF,GACR,GAAGA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCNjCL,EAAOC,QAAU,CAAC,QAAU,uBAAuB,iBAAmB,kC,iCCDtE,yGASII,EAAYD,YAAiB,IAgB3BG,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAdL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAczB,EAAuB,EAAvBA,MAAO0B,EAAgB,EAAhBA,WACrC,OACI,0BAAMC,SAAUF,GACZ,6BAAK,kBAAC,IAAD,CAAOhB,YAAY,QAAQC,KAAK,QAAQE,UAAWL,IAAOO,SAAU,CAACG,IAAUG,MACpF,6BAAK,kBAAC,IAAD,CAAOX,YAAY,WAAWC,KAAK,WAAWkB,KAAM,WAAYhB,UAAWL,IAAOO,SAAU,CAACG,IAAUG,MAC5G,6BAAK,kBAAC,IAAD,CAAOQ,KAAK,WAAWlB,KAAK,aAAaE,UAAWL,MAAS,+CACjEmB,GAAc,yBAAKG,IAAKH,EAAYI,IAAK,YACzCJ,GAAclB,YAAY,UAAW,UAAW,CAACS,KAAWV,IAAO,IACnEP,GAAS,yBAAKC,UAAWC,IAAE6B,kBAAmB/B,GAC/C,6BAAK,8CA8BFgC,uBAPO,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBR,WAAYO,EAAME,KAAKT,cAIS,CAACU,UAAOC,YAAjCL,EAvBD,SAAArC,GAKV,OAAGA,EAAMuC,OACE,kBAAC,IAAD,CAAUI,GAAI,aAGrB,yBAAKrC,UAAWC,IAAEqC,SAClB,sCACA,kBAACjB,EAAD,CAAgBK,SAVH,SAACa,GACd7C,EAAMyC,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASzClB,WAAY/B,EAAM+B","file":"static/js/6.b329bfc4.chunk.js","sourcesContent":["import React from 'react'\r\nimport s from './FormsControls.module.css'\r\nimport { Field } from 'redux-form'\r\n\r\nconst FormControl = ({input, meta, child, element, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {props.children}  \r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n               /> {text} \r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1nzQ6\",\"error\":\"FormsControls_error__2Efp-\"};","export const required = value => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => {\r\n    return (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined \r\n     }\r\n }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logArea\":\"Login_logArea__2ZAxu\",\"formSummaryError\":\"Login_formSummaryError__3flED\"};","import React from 'react'\r\nimport s from './Login.module.css'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Input, createField } from '../common/FormsControls/FormsControls'\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login, logout } from '../../redux/authReducer'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nlet maxLength = maxLengthCreator(30)\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field placeholder='Email' name='email' component={Input} validate={[required, maxLength]}/></div>\r\n            <div><Field placeholder='Password' name='password' type={'password'} component={Input} validate={[required, maxLength]}/></div>\r\n            <div><Field type='checkbox' name='rememberMe' component={Input} /><label>Remember Me</label></div>\r\n            {captchaUrl && <img src={captchaUrl} alt={'captcha'}/>}\r\n            {captchaUrl && createField('Symbols', 'captcha', [required], Input, {})}\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\r\n\r\nconst Login = props => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div className={s.logArea}>\r\n        <div>Login</div>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login, logout} )(Login)"],"sourceRoot":""}