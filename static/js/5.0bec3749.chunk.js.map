{"version":3,"sources":["Components/common/FormsControls/FormsControls.jsx","Components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","hoc/withAuthRedirect.js","Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/DialogsForm/DialogsForm.tsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.tsx"],"names":["FormControl","input","meta","props","child","element","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToPropsRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","to","React","connect","DialogItem","id","key","dialog","Message","message","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","Dialogs","dialogsPage","dialogsElements","dialogsData","map","d","messagesElements","messagesData","m","dialogs","dialogsItems","messages","sendMessage","newMessageBody","mapDispatchToProps","compose"],"mappings":"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","file":"static/js/5.0bec3749.chunk.js","sourcesContent":["import React from 'react'\r\nimport s from './FormsControls.module.css'\r\nimport { Field } from 'redux-form'\r\n\r\nconst FormControl = ({input, meta, child, element, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {props.children}  \r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n               /> {text} \r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1nzQ6\",\"error\":\"FormsControls_error__2Efp-\"};","export const required = value => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => {\r\n    return (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined \r\n     }\r\n }\r\n","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToPropsRedirect = (state) => {\r\n    return {\r\n      isAuth: state.auth.isAuth\r\n    }\r\n  }\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectwithRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n\r\n    return ConnectwithRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1kIxA\",\"dialogsItems\":\"Dialogs_dialogsItems__jkZET\",\"dialog\":\"Dialogs_dialog__2hIjg\",\"messages\":\"Dialogs_messages__2JCcD\",\"message\":\"Dialogs_message__2Srl3\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = ({id, name}) => {\r\n    return (\r\n        <div key={id}><NavLink to={'/dialogs/'+ id} className={s.dialog}>{name}</NavLink></div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = ({id, message}) => {\r\n    return (\r\n        <div key={id} className={s.message}>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Textarea } from '../../common/FormsControls/FormsControls'\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators'\r\n\r\nlet maxLength = maxLengthCreator(100)\r\n\r\ntype PropsType = {\r\n    handleSubmit: any\r\n}\r\n\r\nconst AddNewMessageForm: React.FC<PropsType> = ({handleSubmit}) => {\r\n    return (\r\n     <form onSubmit={handleSubmit}>\r\n        <Field component={Textarea} name={'newMessageBody'} placeholder={'New Message'} validate={[required, maxLength]}/>\r\n        <div><button>Send Message</button></div>\r\n     </form>   \r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'addMessageform'})(AddNewMessageForm)\r\n\r\nexport default AddMessageFormRedux","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport AddMessageFormRedux from './DialogsForm/DialogsForm'\r\n\r\nconst Dialogs = props => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogsData.map(d => {\r\n        return (\r\n            <DialogItem name={d.name} id={d.id}/>\r\n        )\r\n    })\r\n\r\n    let messagesElements = state.messagesData.map(m => {\r\n        return (\r\n            <Message message={m.message} id={m.id}/>\r\n        )\r\n    })\r\n\r\n    let addNewMessage = (value) => {\r\n        props.sendMessage(value.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import Dialogs from './Dialogs'\r\nimport {sendMessage} from '../../redux/dialogsReducer'\r\nimport { connect } from 'react-redux'\r\nimport { WithAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = {\r\n    sendMessage\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs)\r\n"],"sourceRoot":""}