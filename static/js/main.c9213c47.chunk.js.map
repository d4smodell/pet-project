{"version":3,"sources":["redux/authReducer.ts","serviceWorker.js","redux/appReducer.ts","redux/redux-store.ts","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Navbar/Navbar.tsx","App.js","index.js","api/api.ts","Components/common/Preloader/Preloader.js","redux/profileReducer.ts","redux/dialogsReducer.ts","utils/objectHelpers.js","redux/usersReducer.ts"],"names":["initialState","id","email","login","isAuth","captchaUrl","setUserData","type","payload","getCaptchaUrlSuccess","getData","dispatch","a","authAPI","me","data","resultCode","ResultCodesEnum","Success","password","rememberMe","captcha","ResultCodeForCaptchEnum","CaptchaIsRequired","getCaptchaUrl","message","messages","length","stopSubmit","_error","securityAPI","url","logout","authReducer","state","action","Boolean","window","location","hostname","match","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","auth","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","className","to","src","alt","onClick","HeaderContainer","this","props","React","Component","mapDispatchToProps","connect","Navbar","activeClassName","Login","lazy","UsersContainer","ProfileContainer","DialogsContainer","App","initializeApp","fallback","Preloader","path","render","pageTitle","promise","Promise","all","then","AppContainer","withRouter","MainApp","rerenderEntireTree","ReactDOM","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","instance","axios","create","withCredentials","baseURL","headers","profileAPI","getProfile","userId","get","response","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","usersAPI","getUsers","currentPage","pageSize","follow","post","unfollow","delete","postData","setUsersProfile","setStatus","file","savePhotoSuccess","photos","onAddPost","newPostText","newPost","filter","p","dialogsData","name","messagesData","sendMessage","newMessageBody","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersData","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setUsers","toggleIsFetching","toggleIsFollowingProgress","getUsersThunkCreator","count","totalCount","changeUsers","pageNumber","followUnfollowFlow","apiMethod","actionCreator","bind","followed"],"mappings":"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","file":"static/js/main.c9213c47.chunk.js","sourcesContent":["import {authAPI, securityAPI, ResultCodeForCaptchEnum, ResultCodesEnum} from '../api/api'\r\nimport {stopSubmit} from 'redux-form'\r\nimport { Dispatch } from 'react'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS'\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch(action.type) { \r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionTypes =  SetAuthUserDataType | GetCaptchaUrlSuccessType\r\n\r\ntype SetAuthUserDataPayloadType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: SetAuthUserDataPayloadType\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionTypes>\r\n\r\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataType => ({type: SET_USER_DATA, payload: {id, email, login, isAuth}})\r\n\r\ntype GetCaptchaUrlSuccessPayloadType = {\r\n    captchaUrl: string\r\n}\r\n\r\ntype GetCaptchaUrlSuccessType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\r\n    payload: GetCaptchaUrlSuccessPayloadType\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}})\r\n\r\nexport const getData = (): ThunkType => async (dispatch) => {\r\n        let data = await authAPI.me()\r\n            if (data.resultCode === ResultCodesEnum.Success) {\r\n                let {id, email, login} = data.data\r\n                dispatch(setUserData(id, email, login, true))\r\n            }\r\n    }\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch: any) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha) \r\n        if(data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getData())\r\n        } else {\r\n            if(data.resultCode === ResultCodeForCaptchEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'Some Error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl() \r\n    const captchaUrl = data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout()\r\n        if(data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(setUserData(null, null, null, false))\r\n        }\r\n}\r\n\r\n\r\nexport default authReducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { getData } from './authReducer'\r\nimport { Dispatch } from 'react'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst INITIALIZING_SUCCESS = 'INITIALIZING_SUCCESS'\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch(action.type) {\r\n        case INITIALIZING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        \r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZING_SUCCESS\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ActionTypes = InitializedSuccessActionType\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const initializedSuccess = (): InitializedSuccessActionType => ({type: INITIALIZING_SUCCESS})\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getData())\r\n    Promise.all([promise])\r\n    .then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\nexport default appReducer\r\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\r\nimport profileReducer from './profileReducer'\r\nimport dialogsReducer from './dialogsReducer'\r\nimport usersReducer from './usersReducer'\r\nimport authReducer from './authReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from './appReducer'\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n // @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n\r\nexport default store","import React from 'react'\r\nimport './Header.scss'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    isAuth: boolean,\r\n    login: string | null,\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<PropsType> = ({isAuth, login, logout}) => {\r\n    return (\r\n        <header className={'header'}>\r\n        <NavLink to='/profile'><img src=\"https://lever-client-logos.s3.amazonaws.com/82f46ce7-ca84-49d4-ba9b-f233bcb0b0cf-1564438005067.png\" alt=\"logo\"/></NavLink>\r\n        <div className={'loginBlock'}>\r\n            {isAuth\r\n            ?  <div>{login} <button onClick={logout}>Logout</button></div>\r\n            : <NavLink className={'loginButton'} to={'/login'}>Login</NavLink>}\r\n            \r\n        </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport Header from './Header'\r\nimport { logout } from '../../redux/authReducer'\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateType = {\r\n    isAuth: boolean,\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchType = {\r\n    logout: () => void\r\n}\r\n\r\ntype PropsType = MapStateType & MapDispatchType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps: MapDispatchType = {\r\n    logout\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (HeaderContainer)","import React from 'react'\r\nimport './Navbar.scss'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={'nav'}>\r\n        <div className={'item'}><NavLink to='/profile' activeClassName={'active'}>Profile</NavLink></div>\r\n        <div className={'item'}><NavLink to='/dialogs' activeClassName={'active'}>Messages</NavLink></div>\r\n        <div className={'item'}><NavLink to='/news' activeClassName={'active'}>News</NavLink></div>\r\n        <div className={'item'}><NavLink to='/music' activeClassName={'active'}>Music</NavLink></div>\r\n        <div className={'item'}><NavLink to='/settings' activeClassName={'active'}>Settings</NavLink></div>\r\n        <div className={'item'}><NavLink to='/users' activeClassName={'active'}>Users</NavLink></div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { Suspense } from 'react';\nimport HeaderContainer from './Components/Header/HeaderContainer'\nimport Navbar from './Components/Navbar/Navbar'\nimport store from './redux/redux-store'\nimport {HashRouter, Route} from 'react-router-dom'\nimport {Provider} from 'react-redux'\nimport './App.css';\nimport { withRouter } from 'react-router-dom'\nimport { getData } from './redux/authReducer'\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/appReducer'\nimport Preloader from './Components/common/Preloader/Preloader';\n\nconst Login = React.lazy(() => import('./Components/Login/Login'))\nconst UsersContainer = React.lazy(() => import('./Components/Users/UsersContainer'))\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileContainer')) \nconst DialogsContainer = React.lazy(() => import('./Components/Dialogs/DialogsContainer'))\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.initializeApp()\n}\n  render() {\n    if(!this.props.initialized) {\n      return <Preloader/>\n    }\n    return (\n      <HashRouter>\n        <div className='appWrapper'>\n        <HeaderContainer/>\n        <Navbar/>\n        <div className='appWrapperContent'>\n        <Suspense fallback={<Preloader />}>\n        <Route path='/profile/:userId?' render={() => <ProfileContainer />}/>\n        <Route path='/dialogs' render={() => <DialogsContainer />}/>\n        <Route path='/users' render={() => <UsersContainer pageTitle={'Den'}/>}/>\n        <Route path='/login' render={() => <Login/>}/>\n        </Suspense>\n        </div>\n      </div>\n      </HashRouter>\n    );\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    initialized: state.app.initialized\n  }\n}\n\nlet mapDispatchToProps = {\n  getData,\n  initializeApp\n}\n\nlet AppContainer = compose(connect(mapStateToProps, mapDispatchToProps), withRouter)(App)\n\nlet MainApp = props => {\n  return <HashRouter>\n  <Provider store={store}>\n  <AppContainer />\n  </Provider>\n  </HashRouter>\n}\n\nexport default MainApp","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\nlet rerenderEntireTree = (state) => {\n    ReactDOM.render(<MainApp />, document.getElementById('root'));\n}\n\n\nrerenderEntireTree(store.getState())\n\nstore.subscribe(() => {\n    let state = store.getState()\n    rerenderEntireTree(state)\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { ContactsType } from './../redux/profileReducer';\r\nimport axios from 'axios'\r\nimport { ProfileType } from '../redux/profileReducer'\r\nimport { UserType, PhotosType } from '../types/types'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\"API-KEY\": \"3db790bc-68c8-44d6-839e-037f7aa28043\"}\r\n})\r\n\r\ntype UpdateStatusResponseType = {\r\n    resultCode: ResultCodesEnum,\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\n\r\ntype GetProfileResponseType = {\r\n    userId: number,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    contacts: ContactsType,\r\n    photos: PhotosType\r\n    \r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<GetProfileResponseType>(`profile/` + userId)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<UpdateStatusResponseType>(`profile/status/`, {status: status})\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    savePhoto(photoFile: any) {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put(`profile/photo/`, formData, {headers: {'Content-Type': 'multipart/form/data'}})\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put(`profile`, profile)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}\r\n\r\ntype UsersResponseType = {\r\n    items: Array<UserType>,\r\n    totalCount: number,\r\n    error: string\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage: number, pageSize: number) {\r\n        return instance.get<UsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    \r\n    follow (userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    \r\n    unfollow (userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {id: number, email: string, login: string},\r\n    resultCode: ResultCodesEnum,\r\n    messages: Array<string>,\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: {userId: number},\r\n    resultCode: ResultCodeForCaptchEnum | ResultCodesEnum,\r\n    messages: Array<string>,\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n}\r\n\r\n","import React from 'react'\r\nimport './../../Users/Users.scss'\r\n\r\nconst Preloader = props => {\r\n    return <img className={'loaderGif'} src={'https://www.internationalvillage.org/images/loader_small.gif'} alt={'loader'}/>\r\n}\r\n\r\nexport default Preloader","import {profileAPI} from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { PhotosType } from '../types/types'\r\nimport { Dispatch } from 'react'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USERS_PROFILE = 'SET-USERS-PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\n\r\ntype PostsType = {\r\n  id: number,\r\n  post: string\r\n}\r\n\r\nexport type ContactsType = {\r\n  github: string,\r\n  vk: string,\r\n  facebook: string,\r\n  instagram: string,\r\n  twitter: string,\r\n  youtube: string,\r\n  website: string,\r\n  mainLink: string\r\n}\r\n\r\nexport type ProfileType = {\r\n  userId: number,\r\n  lookingForAJob: boolean,\r\n  lookingForAJobDescription: string,\r\n  fullName: string,\r\n  contacts: ContactsType,\r\n  photos: PhotosType\r\n}\r\n\r\nlet initialState = {\r\n        postData: [\r\n            {id: 1, post: 'PET_PROJECT'},\r\n            {id: 2, post: 'REACT-REDUX'},\r\n            {id: 3, post: 'POST'},\r\n            {id: 4, post: 'POST'},\r\n          ] as Array <PostsType>,\r\n        profile: null as ProfileType | null,\r\n        status: ''\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ActionTypes = OnAddPostType | SavePhotoSuccessType | SetUsersProfile | SetStatusType | DeletePostType\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\ntype GetStateType = AppStateType\r\n\r\nconst profileReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch(action.type) {\r\n      case ADD_POST: {\r\n        let newPost = {\r\n            id: 9, post: action.newPostText\r\n        }\r\n        return {\r\n            ...state, \r\n            postData: [...state.postData, newPost],\r\n        }\r\n    }\r\n        case SET_USERS_PROFILE:\r\n          return {...state, profile: action.profile}\r\n\r\n        case SET_STATUS:\r\n          return {...state, status: action.status}\r\n\r\n        case DELETE_POST:\r\n          return {...state, postData: state.postData.filter(p => p.id !== action.id)}\r\n\r\n        case SAVE_PHOTO_SUCCESS:\r\n          return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getProfile = (userId: number): ThunkType => async (dispatch: any) => {\r\n    let data = await profileAPI.getProfile(userId)\r\n      dispatch(setUsersProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n      dispatch(setStatus(data))\r\n  }\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n      if(data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n      }\r\n  }\r\n\r\n  export const savePhoto = (file: any): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n      if(data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(data.data.photos))\r\n      }\r\n  }\r\n\r\n  export const saveProfile = (profile: ProfileType): ThunkType => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId\r\n    let data = await profileAPI.saveProfile(profile)\r\n      if(data.resultCode === 0) {\r\n        dispatch(getProfile(userId))\r\n      } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n      }\r\n  }\r\n\r\ntype OnAddPostType = {\r\n  type: typeof ADD_POST,\r\n  newPostText: string\r\n}\r\n  \r\nexport const onAddPost = (newPostText: string): OnAddPostType => ({type: ADD_POST, newPostText})\r\n\r\ntype SavePhotoSuccessType = {\r\n  type: typeof SAVE_PHOTO_SUCCESS,\r\n  photos: PhotosType\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessType => ({type: SAVE_PHOTO_SUCCESS, photos})\r\n\r\ntype SetUsersProfile = {\r\n  type: typeof SET_USERS_PROFILE,\r\n  profile: ProfileType\r\n}\r\nexport const setUsersProfile = (profile: ProfileType): SetUsersProfile => ({type: SET_USERS_PROFILE, profile})\r\n\r\ntype SetStatusType = {\r\n  type: typeof SET_STATUS,\r\n  status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusType => ({type: SET_STATUS, status})\r\n\r\ntype DeletePostType = {\r\n  type: typeof DELETE_POST,\r\n  id: number\r\n}\r\nexport const deletePost = (id: number): DeletePostType => ({type: DELETE_POST, id})\r\nexport default profileReducer\r\n","const ADD_MESSAGE = 'ADD-MESSAGE'\r\n\r\ntype DialogType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: 'User 1'},\r\n        {id: 2, name: 'User 2'},\r\n        {id: 3, name: 'User 3'},\r\n        {id: 4, name: 'User 4'},\r\n        {id: 5, name: 'User 5'},\r\n    ] as Array<DialogType>,\r\n    \r\n    messagesData: [\r\n      {id: 1, message: 'Fight Club'},\r\n      {id: 2, message: 'Shutter 2004'},\r\n      {id: 3, message: 'GTO'},\r\n      {id: 4, message: 'Rasen 1998'},\r\n      {id: 5, message: 'Black Lagoon'},\r\n    ] as Array<MessageType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 9, message: action.newMessageBody}]\r\n            }\r\n\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\ntype NewMessageBodyType = {\r\n    type: typeof ADD_MESSAGE,\r\n    newMessageBody: string\r\n}\r\n\r\nexport const sendMessage = (newMessageBody: string): NewMessageBodyType => ({type: ADD_MESSAGE, newMessageBody})\r\n\r\nexport default dialogsReducer","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    items.map(u => {\r\n        if(u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {usersAPI} from '../api/api'\r\nimport { updateObjectInArray } from '../utils/objectHelpers'\r\nimport { UserType } from '../types/types'\r\n// import { Dispatch } from 'react'\r\n// import { AppStateType } from './redux-store'\r\n// import { ThunkAction } from 'redux-thunk'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UserType>,\r\n    pageSize: 7,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: any) => {\r\n    switch(action.type) {\r\n        case FOLLOW: \r\n            return {\r\n                ...state,\r\n                usersData: updateObjectInArray(state.usersData, action.userId, 'id', {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW: \r\n            return {\r\n                ...state,\r\n                usersData: updateObjectInArray(state.usersData, action.userId, 'id,', {followed: false})\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {...state, usersData: action.usersData}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {...state, followingInProgress: action.isFetching\r\n                 ? [...state.followingInProgress, action.userId]\r\n                 : [...state.followingInProgress.filter(id => id !== action.userId)]}\r\n        \r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\n//type ActionTypes = FollowSuccessType | UnfollowSuccessType | SetUsersType | SetCurrentPageType | SetTotalUsersCountType | ToggleIsFetchingType | ToggleIsFollowingProgressType\r\n\r\ntype FollowSuccessType = {\r\n    type: typeof FOLLOW,\r\n    userId: number\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowSuccessType => ({type: FOLLOW, userId})\r\n\r\ntype UnfollowSuccessType = {\r\n    type: typeof UNFOLLOW,\r\n    userId: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessType => ({type: UNFOLLOW, userId})\r\n\r\ntype SetUsersType = {\r\n    type: typeof SET_USERS,\r\n    usersData: Array<UserType>\r\n}\r\nexport const setUsers = (usersData: Array<UserType>): SetUsersType => ({type: SET_USERS, usersData})\r\n\r\ntype SetCurrentPageType = {\r\n    type: typeof SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageType => ({type: SET_CURRENT_PAGE, currentPage})\r\n\r\ntype SetTotalUsersCountType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    count: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountType => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\r\n\r\ntype ToggleIsFetchingType = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingType => ({type: TOGGLE_IS_FETCHING, isFetching})\r\n\r\ntype ToggleIsFollowingProgressType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean,\r\n    userId: number\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): ToggleIsFollowingProgressType => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\n\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => async (dispatch: any) => {\r\n            dispatch(toggleIsFetching(true))\r\n            let data = await usersAPI.getUsers(currentPage, pageSize)\r\n            dispatch(setUsers(data.items))\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n\r\nexport const changeUsers = (pageNumber: number, pageSize: number) => async (dispatch: any) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(pageNumber))\r\n        let data = await usersAPI.getUsers(pageNumber, pageSize)\r\n            dispatch(setUsers(data.items))\r\n            dispatch(toggleIsFetching(false))\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actionCreator(userId))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const unfollow = (userId: number) => async (dispatch: any) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n}\r\n\r\nexport const follow = (userId: number) => async (dispatch: any) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n}\r\n\r\n\r\nexport default usersReducer"],"sourceRoot":""}