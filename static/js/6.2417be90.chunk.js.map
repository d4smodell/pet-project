{"version":3,"sources":["Components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","Components/Login/Login.jsx"],"names":["FormControl","input","meta","props","child","element","hasError","touched","error","className","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","connect","state","isAuth","auth","login","logout","to","formData","email","password","rememberMe","captcha"],"mappings":"6QAIMA,EAAc,SAAC,GAA4C,EAA3CC,MAA4C,IAArCC,EAAoC,EAApCA,KAAyBC,GAAW,EAA9BC,MAA8B,EAAvBC,QAAuB,mDACvDC,EAAWJ,EAAKK,SAAWL,EAAKM,MACtC,OACI,yBAAKC,UAAW,gBAAuBH,EAAW,QAAU,KACxD,6BACKH,EAAMO,UAEVJ,GAAY,8BAAOJ,EAAKM,SAKxBG,EAAW,SAACR,GAAW,IACzBF,EAAoCE,EAApCF,MAAuBW,GAAaT,EAA7BD,KAA6BC,EAAvBC,MADW,YACYD,EADZ,2BAE/B,OAAO,kBAACH,EAAgBG,EAAO,8CAAcF,EAAWW,MAG/CC,EAAQ,SAACV,GAAW,IACtBF,EAAoCE,EAApCF,MAAuBW,GAAaT,EAA7BD,KAA6BC,EAAvBC,MADQ,YACeD,EADf,2BAE5B,OAAO,kBAACH,EAAgBG,EAAO,2CAAWF,EAAWW,MAG5CE,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2Cf,EAA3C,uDAAmD,GAAIgB,EAAvD,uDAA8D,GAA9D,OACvB,6BACI,kBAAC,IAAD,eAAOJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPf,IALf,IAMegB,K,uDCjCnB,oEAAO,IAAME,EAAW,SAAAC,GACpB,IAAGA,EACH,MAAO,qBAGEC,EAAmB,SAACC,GAC7B,OAAO,SAACF,GACR,GAAGA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,uDCPjC,gGASIA,EAAYD,YAAiB,IAgB3BG,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAdL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcrB,EAAuB,EAAvBA,MAAOsB,EAAgB,EAAhBA,WACrC,OACI,0BAAMC,SAAUF,GACZ,6BAAK,kBAAC,IAAD,CAAOd,YAAY,QAAQC,KAAK,QAAQE,UAAWL,IAAOO,SAAU,CAACC,IAAUG,MACpF,6BAAK,kBAAC,IAAD,CAAOT,YAAY,WAAWC,KAAK,WAAWgB,KAAM,WAAYd,UAAWL,IAAOO,SAAU,CAACC,IAAUG,MAC5G,6BAAK,kBAAC,IAAD,CAAOQ,KAAK,WAAWhB,KAAK,aAAaE,UAAWL,MAAS,+CACjEiB,GAAc,yBAAKG,IAAKH,EAAYI,IAAK,YACzCJ,GAAchB,YAAY,UAAW,UAAW,CAACO,KAAWR,IAAO,IACnEL,GAAS,yBAAKC,UAAW,oBAAqBD,GAC/C,6BAAK,8CA8BF2B,uBAPO,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBP,WAAYM,EAAME,KAAKR,cAIS,CAACS,UAAOC,YAAjCL,EAvBD,SAAAhC,GAKV,OAAGA,EAAMkC,OACE,kBAAC,IAAD,CAAUI,GAAI,aAGrB,yBAAKhC,UAAW,WAChB,sCACA,kBAACiB,EAAD,CAAgBK,SAVH,SAACW,GACdvC,EAAMoC,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASzChB,WAAY3B,EAAM2B","file":"static/js/6.2417be90.chunk.js","sourcesContent":["import React from 'react'\r\nimport './FormsControls.scss'\r\nimport { Field } from 'redux-form'\r\n\r\nconst FormControl = ({input, meta, child, element, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={'formControl' + ' ' + (hasError ? 'error' : '')}>\r\n            <div>\r\n                {props.children}  \r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n               /> {text} \r\n    </div>\r\n)","export const required = value => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => {\r\n    return (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined \r\n     }\r\n }\r\n","import React from 'react'\r\nimport './Login.scss'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Input, createField } from '../common/FormsControls/FormsControls'\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login, logout } from '../../redux/authReducer'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nlet maxLength = maxLengthCreator(30)\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field placeholder='Email' name='email' component={Input} validate={[required, maxLength]}/></div>\r\n            <div><Field placeholder='Password' name='password' type={'password'} component={Input} validate={[required, maxLength]}/></div>\r\n            <div><Field type='checkbox' name='rememberMe' component={Input} /><label>Remember Me</label></div>\r\n            {captchaUrl && <img src={captchaUrl} alt={'captcha'}/>}\r\n            {captchaUrl && createField('Symbols', 'captcha', [required], Input, {})}\r\n            {error && <div className={'formSummaryError'}>{error}</div>}\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\r\n\r\nconst Login = props => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div className={'logArea'}>\r\n        <div>Login</div>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login, logout} )(Login)"],"sourceRoot":""}